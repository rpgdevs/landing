---
import { Icon } from 'astro-icon/components';
import ThemeSwitcher from "~/components/theme-switcher.astro";
import type { NavItem } from "~/types";
import LanguajePicker from "~/components/LanguagePicker.astro";

const { currentLocale } = Astro;

const navItemsSpan: Array<NavItem> = [
  { title: "Servicios", url: "#features" },
  { title: "Contácto", url: "#contactform" },
  { title: "¿Por que RPG?", url: "#compatibility" },
];

const navItemsEngl: Array<NavItem> = [
  { title: "Services", url: "#features" },
  { title: "Contact", url: "#contactForm" },
  { title: "Why RPG?", url: "#compatibility" },
];

const items = currentLocale == 'es' ? navItemsSpan : navItemsEngl;

/*const URL = Astro.url.origin*/
---

<header
  id="page-header"
  class="absolute bottom-0 z-20 flex w-full items-center justify-between border-b border-transparent px-8 py-4 text-white"
>
  <a class="flex items-center gap-3 hover:!text-default" href="#">
    <h1 class="sr-only">RPG Software Factory</h1>
    <Icon name="logomark" class="h-10"/>
    <Icon name="wordmark" class="hidden h-4 sm:block" />
  </a>
  <body>
    <article class="flex items-center gap-6">
      <LanguajePicker /> 
      <nav class="hidden sm:block">
        <ul class="flex items-center gap-6">
          {
            items.map(({ title, url }) => (
              <li>
                <a class="text-sm" href={url}>
                  {title}
                </a>
              </li>
            ))
          }
        </ul>
      </nav>
      <button
        id="open-nav-button"
        type="button"
        class="btn sm:hidden"
        aria-label="Navigation"
      >
        <Icon name="mdi:menu" class="h-8" />
      </button>
      <ThemeSwitcher />
    </article>
    <article
      id="menu-modal"
      class="modal fixed inset-0 hidden bg-default px-8 py-4 text-default"
      aria-hidden="true"
    >
      <div class="space-y-4" role="dialog" aria-modal="true">
        <header class="text-right">
          <button
            id="close-nav-button"
            type="button"
            class="btn"
            aria-label="Close navigation"
          >
            <Icon name="mdi:close" class="h-8" />
          </button>
        </header>
        <aside class="flex justify-center">
          <Icon name="logomark" class="h-16" />
        </aside>
        <nav>
          <ul class="flex flex-col">
            {
              items.map(({ title, url }) => (
                <li>
                  <a class="block py-4 text-center text-xl" href={url}>
                    {title}
                  </a>
                </li>
              ))
            }
          </ul>
        </nav>
      </div>
    </article>   

  </body>
</header>

<script>
  import MicroModal from "micromodal";
  import invariant from "tiny-invariant";

  const menuModalId = "menu-modal";

  const header = document.querySelector("#page-header") as HTMLElement;
  const page = document.documentElement;
  const menu = document.querySelector(`#${menuModalId} ul`);
  const openNavButton = document.querySelector("#open-nav-button");
  const closeNavButton = document.querySelector("#close-nav-button");

  invariant(header, "header should not be null");
  invariant(menu, "menu should not be null");
  invariant(openNavButton, "openNavButton should not be null");
  invariant(closeNavButton, "closeNavButton should not be null");

  const openMenu = () => {
    MicroModal.show(menuModalId, { disableScroll: true });
  };

  const closeMenu = () => {
    MicroModal.close(menuModalId);
  };

  openNavButton.addEventListener("click", openMenu);
  closeNavButton.addEventListener("click", closeMenu);

  document.addEventListener("scroll", () => {
    const d = page.clientHeight - page.scrollTop - header.offsetHeight;
    header.classList.toggle("fixed-header", d < 0);
  });

  menu.addEventListener("click", (event) => {
    if ((event.target as HTMLElement).tagName === "A") {
      closeMenu();
    }
  });

  const scriptURL =
    'https://script.google.com/macros/s/AKfycbwZQwePCEmrBp8uGyTrH_pDT6RxRXQYp4Mit5U6kpI2wmqoo8BGqP1dup8FvESbHZT9sw/exec';

  const form = document.getElementById('submit_form');

  document.addEventListener('DOMContentLoaded', () => {
    form!.addEventListener('submit', (e) => {
      console.log('FORMULARIO');
      e.preventDefault();
      
      fetch(scriptURL, {
        method: 'POST',
        body: new FormData(form as HTMLFormElement),
      })
        /*.then((response) =>
          // Este alert no se muestra solo redirige a la pagina de agradecimiento
          alert('Thank you! your form is submitted successfully.'),
        )*/
        .then(() => {
           window.location.href = '/gratitude'
        })
        .catch((error) => console.error('Error!', error.message));
    });
  });

</script>

<noscript>
  <style>
    #open-nav-button {
      display: none;
    }
  </style>
</noscript>

<style>
  .fixed-header {
    @apply fixed bottom-auto top-0;
    @apply border-default bg-default text-default;
  }
  .modal.is-open {
    @apply block;
  }
</style>
